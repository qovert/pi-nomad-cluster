job "traefik" {
  datacenters = ["{{ consul_datacenter }}"]
  type = {{ '"system"' if traefik_run_on_all_nodes else '"service"' }}

{% if not traefik_run_on_all_nodes %}
  # Pin to pistor0 when not running on all nodes
  constraint {
    attribute = "${node.unique.name}"
    operator  = "="
    value     = "pistor0"
  }
{% endif %}

  group "gw" {
    network {
      mode = "host"
      port "web" {
        static = 80
      }
      port "websecure" {
        static = 443
      }
      port "dashboard" {
        static = 8080
      }
    }

    volume "acme" {
      type      = "host"
      read_only = false
      source    = "traefik_acme"
    }

    task "traefik" {
      driver = "docker"
      config {
        image = "traefik:v3.0"
        ports = ["web", "websecure", "dashboard"]
        args = [
          "--api.dashboard=true",
          "--api.insecure=true",
          "--ping=true",
          "--entrypoints.web.address=:80",
          "--entrypoints.websecure.address=:443",
          "--providers.consulcatalog=true",
          "--providers.consulcatalog.endpoint.address=127.0.0.1:8500",
          "--providers.consulcatalog.exposedbydefault=false",
          "--providers.consulcatalog.prefix=traefik"
        ]
      }
      

      
      volume_mount {
        volume      = "acme"
        destination = "/acme"
        read_only   = false
      }
      
      resources {
        cpu    = 200
        memory = 256
      }

      restart {
        attempts = 5
        interval = "10m"
        delay    = "15s"
        mode     = "delay"
      }
      
      service {
        name = "traefik"
        address_mode = "host"
        port = "web"
        tags = [
          "traefik.enable=true",
          "traefik.http.routers.dashboard.rule=PathPrefix(`/dashboard`) || PathPrefix(`/api`)",
          "traefik.http.routers.dashboard.service=api@internal"
        ]
        
        check {
          name           = "traefik-web"
          type           = "http"
          address_mode   = "host"
          port           = "web"
          path           = "/ping"
          interval       = "15s"
          timeout        = "5s"
          initial_status = "passing"
          check_restart {
            limit = 3
            grace = "15s"
          }
        }
      }

      service {
        name = "traefik-dashboard"
        address_mode = "host"
        port = "dashboard"
        tags = [
          "traefik.enable=false"
        ]
        
        check {
          name           = "traefik-dashboard"
          type           = "http"
          address_mode   = "host"  
          port           = "dashboard"
          path           = "/ping"
          interval       = "15s"
          timeout        = "5s"
          initial_status = "passing"
          check_restart {
            limit = 3
            grace = "15s"
          }
        }
      }
    }
  }
}
